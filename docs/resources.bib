@InProceedings{zulehner2018,
  author     = {Zulehner, Alwin and Paler, Alexandru and Wille, Robert},
  booktitle  = {2018 Design, Automation \& Test in Europe Conference \& Exhibition ({DATE})},
  date       = {2018-03},
  title      = {Efficient mapping of quantum circuits to the {IBM} {QX} architectures},
  doi        = {10.23919/DATE.2018.8342181},
  eventtitle = {2018 Design, Automation \& Test in Europe Conference \& Exhibition ({DATE})},
  isbn       = {978-3-9819263-0-9},
  location   = {Dresden, Germany},
  pages      = {1135--1138},
  publisher  = {{IEEE}},
  url        = {http://ieeexplore.ieee.org/document/8342181/},
  urldate    = {2022-11-11},
  abstract   = {In March 2017, {IBM} launched the project {IBM} Q with the goal to provide access to quantum computers for a broad audience. This allowed users to conduct quantum experiments on a 5-qubit and, since June 2017, also on a 16-qubit quantum computer (called {IBM} {QX}2 and {IBM} {QX}3, respectively). In order to use these, the desired quantum functionality (e.g. provided in terms of a quantum circuit) has to properly be mapped so that the underlying physical constraints are satisﬁed – a complex task. This demands for solutions to automatically and efﬁciently conduct this mapping process. In this paper, we propose such an approach which satisﬁes all constraints given by the architecture and, at the same time, aims to keep the overhead in terms of additionally required quantum gates minimal. The proposed approach is generic and can easily be conﬁgured for future architectures. Experimental evaluations show that the proposed approach clearly outperforms {IBM}’s own mapping solution with respect to runtime as well as resulting costs.},
  annotation = {annotated},
  file       = {Zulehner et al. - 2018 - Efficient mapping of quantum circuits to the IBM Q.pdf:C\:/Users/sskah/OneDrive/Workspace/QTech/MSc Project/Resources/Zulehner et al. - 2018 - Efficient mapping of quantum circuits to the IBM Q.pdf:PDF},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@InProceedings{siraichi2018,
  author     = {Siraichi, Marcos Yukio and Santos, Vinícius Fernandes dos and Collange, Caroline and Pereira, Fernando Magno Quintao},
  booktitle  = {Proceedings of the 2018 International Symposium on Code Generation and Optimization},
  date       = {2018-02-24},
  title      = {Qubit allocation},
  doi        = {10.1145/3168822},
  eventtitle = {{CGO} '18: 16th Annual {IEEE}/{ACM} International Symposium on Code Generation and Optimization},
  isbn       = {978-1-4503-5617-6},
  location   = {Vienna Austria},
  pages      = {113--125},
  publisher  = {{ACM}},
  urldate    = {2022-11-11},
  abstract   = {In May of 2016, {IBM} Research has made a quantum processor available in the cloud to the general public. The possibility of programming an actual quantum device has elicited much enthusiasm. Yet, quantum programming still lacks the compiler support that modern programming languages enjoy today. To use universal quantum computers like {IBM}’s, programmers must design low-level circuits. In particular, they must map logical qubits into physical qubits that need to obey connectivity constraints. This task resembles the early days of programming, in which software was built in machine languages. In this paper, we formally introduce the qubit allocation problem and provide an exact solution to it. This optimal algorithm deals with the simple quantum machinery available today; however, it cannot scale up to the more complex architectures scheduled to appear. Thus, we also provide a heuristic solution to qubit allocation, which is faster than the current solutions already implemented to deal with this problem.},
  annotation = {annotated},
  file       = {Siraichi et al. - 2018 - Qubit allocation.pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Siraichi et al. - 2018 - Qubit allocation.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@Article{childs,
  author     = {Childs, Andrew M and Schoute, Eddie and Unsal, Cem M},
  title      = {Circuit Transformations for Quantum Architectures},
  pages      = {29},
  abstract   = {Quantum computer architectures impose restrictions on qubit interactions. We propose efficient circuit transformations that modify a given quantum circuit to fit an architecture, allowing for any initial and final mapping of circuit qubits to architecture qubits. To achieve this, we first consider the qubit movement subproblem and use the Routing via Matchings framework to prove tighter bounds on parallel routing. In practice, we only need to perform partial permutations, so we generalize Routing via Matchings to that setting. We give new routing procedures for common architecture graphs and for the generalized hierarchical product of graphs, which produces subgraphs of the Cartesian product. Secondly, for serial routing, we consider the Token Swapping framework and extend a 4-approximation algorithm for general graphs to support partial permutations. We apply these routing procedures to give several circuit transformations, using various heuristic qubit placement subroutines. We implement these transformations in software and compare their performance for large quantum circuits on grid and modular architectures, identifying strategies that work well in practice.},
  annotation = {not finished annotated},
  file       = {Childs et al. - Circuit Transformations for Quantum Architectures.pdf:C\:/Users/sskah/OneDrive/Workspace/QTech/Project/Resources/Childs et al. - Circuit Transformations for Quantum Architectures.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@Misc{lao2021,
  author     = {Lao, Lingling and Browne, Dan E.},
  date       = {2021-11-07},
  title      = {2QAN: A quantum compiler for 2-local qubit Hamiltonian simulation algorithms},
  eprint     = {2108.02099},
  eprinttype = {arxiv},
  abstract   = {Simulating quantum systems is one of the most important potential applications of quantum computers. The high-level circuit deﬁning the simulation needs to be compiled into one that complies with hardware limitations such as qubit architecture (connectivity) and instruction (gate) set. Generalpurpose quantum compilers work at the gate level and have little knowledge of the mathematical properties of quantum applications, missing further optimization opportunities. Existing application-speciﬁc compilers only apply advanced optimizations in the scheduling procedure and are restricted to the {CNOT} or {CZ} gate set. In this work, we develop a compiler, named 2QAN, to optimize quantum circuits for 2-local qubit Hamiltonian simulation problems, a framework which includes the important quantum approximate optimization algorithm ({QAOA}). In particular, we exploit the ﬂexibility of permuting different operators in the Hamiltonian (no matter whether they commute) and propose permutation-aware techniques for qubit routing, gate optimization and scheduling to minimize compilation overhead. 2QAN can target different qubit topologies and different hardware gate sets. Compilation results on four applications (up to 50 qubits) and three quantum computers (namely, Google Sycamore, {IBMQ} Montreal and Rigetti Aspen) show that 2QAN outperforms state-of-the-art general-purpose compilers and applicationspeciﬁc compilers. Speciﬁcally, 2QAN can reduce the number of inserted {SWAP} gates by 11.5X, reduce overhead in hardware gate count by 68.5X, and reduce overhead in circuit depth by 21X. Experimental results on the Montreal device demonstrate that benchmarks compiled by 2QAN achieve the highest ﬁdelity.},
  annotation = {The main paper},
  file       = {Lao and Browne - 2021 - 2QAN A quantum compiler for 2-local qubit Hamilto.pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Lao and Browne - 2021 - 2QAN A quantum compiler for 2-local qubit Hamilto.pdf:application/pdf},
  groups     = {Hamiltonian Compilation},
  keywords   = {hamiltonian},
  langid     = {english},
  number     = {{arXiv}:2108.02099},
  publisher  = {{arXiv}},
  shorttitle = {2QAN},
}

@InProceedings{li2019,
  author     = {Li, Gushu and Ding, Yufei and Xie, Yuan},
  booktitle  = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
  date       = {2019-04-04},
  title      = {Tackling the Qubit Mapping Problem for {NISQ}-Era Quantum Devices},
  doi        = {10.1145/3297858.3304023},
  eventtitle = {{ASPLOS} '19: Architectural Support for Programming Languages and Operating Systems},
  isbn       = {978-1-4503-6240-5},
  location   = {Providence {RI} {USA}},
  pages      = {1001--1014},
  publisher  = {{ACM}},
  urldate    = {2022-11-11},
  abstract   = {Due to little consideration in the hardware constraints, e.g., limited connections between physical qubits to enable twoqubit gates, most quantum algorithms cannot be directly executed on the Noisy Intermediate-Scale Quantum ({NISQ}) devices. Dynamically remapping logical qubits to physical qubits in the compiler is needed to enable the two-qubit gates in the algorithm, which introduces additional operations and inevitably reduces the fidelity of the algorithm. Previous solutions in finding such remapping suffer from high complexity, poor initial mapping quality, and limited flexibility and controllability.},
  file       = {Li et al. - 2019 - Tackling the Qubit Mapping Problem for NISQ-Era Qu.pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Li et al. - 2019 - Tackling the Qubit Mapping Problem for NISQ-Era Qu.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@InProceedings{zhang2021,
  author     = {Zhang, Chi and Hayes, Ari B. and Qiu, Longfei and Jin, Yuwei and Chen, Yanhao and Zhang, Eddy Z.},
  booktitle  = {Proceedings of the 26th {ACM} International Conference on Architectural Support for Programming Languages and Operating Systems},
  date       = {2021-04-19},
  title      = {Time-optimal Qubit mapping},
  doi        = {10.1145/3445814.3446706},
  eventtitle = {{ASPLOS} '21: 26th {ACM} International Conference on Architectural Support for Programming Languages and Operating Systems},
  isbn       = {978-1-4503-8317-2},
  location   = {Virtual {USA}},
  pages      = {360--374},
  publisher  = {{ACM}},
  urldate    = {2022-11-11},
  abstract   = {Rapid progress in the physical implementation of quantum computers gave birth to multiple recent quantum machines implemented with superconducting technology. In these {NISQ} machines, each qubit is physically connected to a bounded number of neighbors. This limitation prevents most quantum programs from being directly executed on quantum devices. A compiler is required for converting a quantum program to a hardware-compliant circuit, in particular, making each two-qubit gate executable by mapping the two logical qubits to two physical qubits with a link between them. To solve this problem, existing studies focus on inserting {SWAP} gates to dynamically remap logical qubits to physical qubits. However, most of the schemes lack the consideration of time-optimality of generated quantum circuits, or are achieving time-optimality with certain constraints. In this work, we propose a theoretically time-optimal {SWAP} insertion scheme for the qubit mapping problem. Our model can also be extended to practical heuristic algorithms. We present exact analysis results by using our model for quantum programs with recurring execution patterns. We have for the first time discovered an optimal qubit mapping pattern for quantum fourier transformation ({QFT}) on 2D nearest neighbor architecture. We also present a scalable extension of our theoretical model that can be used to solve large quantum circuits.},
  annotation = {The authors have some other papers on this subject},
  file       = {Zhang et al. - 2021 - Time-optimal Qubit mapping.pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Zhang et al. - 2021 - Time-optimal Qubit mapping.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@Article{zhou2020,
  author       = {Zhou, Xiangzhen and Li, Sanjiang and Feng, Yuan},
  date         = {2020-12},
  journaltitle = {{IEEE} Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  title        = {Quantum Circuit Transformation Based on Simulated Annealing and Heuristic Search},
  doi          = {10.1109/TCAD.2020.2969647},
  issn         = {0278-0070, 1937-4151},
  number       = {12},
  pages        = {4683--4694},
  url          = {https://ieeexplore.ieee.org/document/8970267/},
  urldate      = {2022-11-11},
  volume       = {39},
  abstract     = {Quantum algorithm design usually assumes access to a perfect quantum computer with ideal properties like full connectivity, noise-freedom, and arbitrarily long coherence time. In noisy intermediate-scale quantum ({NISQ}) devices, however, the number of qubits is highly limited and quantum operation error and qubit coherence are not negligible. Besides, the connectivity of physical qubits in a quantum processing unit ({QPU}) is also strictly constrained. Thereby, additional operations like {SWAP} gates have to be inserted to satisfy this constraint while preserving the functionality of the original circuit. This process is known as quantum circuit transformation. Adding additional gates will increase both the size and depth of a quantum circuit and, therefore, cause further decay of the performance of a quantum circuit. Thus, it is crucial to minimize the number of added gates. In this article, we propose an efﬁcient method to solve this problem. We ﬁrst choose by using simulated annealing an initial mapping which ﬁts well with the input circuit and then, with the help of a heuristic cost function, stepwise apply the best-selected {SWAP} gates until all quantum gates in the circuit can be executed. Our algorithm runs in time polynomial in all parameters, including the size and the qubit number of the input circuit, and the qubit number in the {QPU}. Its space complexity is quadratic to the number of edges in the {QPU}. The experimental results on extensive realistic circuits conﬁrm that the proposed method is efﬁcient and the number of added gates of our algorithm is, on average, only 57\% of that of state-of-the-art algorithms on {IBM} Q20 (Tokyo), the most recent {IBM} quantum device.},
  file         = {Zhou et al. - 2020 - Quantum Circuit Transformation Based on Simulated .pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Zhou et al. - 2020 - Quantum Circuit Transformation Based on Simulated .pdf:application/pdf},
  groups       = {General Compilation},
  keywords     = {general},
  langid       = {english},
  shortjournal = {{IEEE} Trans. Comput.-Aided Des. Integr. Circuits Syst.},
}

@Article{cross2022,
  author       = {Cross, Andrew and Javadi-Abhari, Ali and Alexander, Thomas and De Beaudrap, Niel and Bishop, Lev S. and Heidel, Steven and Ryan, Colm A. and Sivarajah, Prasahnt and Smolin, John and Gambetta, Jay M. and Johnson, Blake R.},
  date         = {2022-09-30},
  journaltitle = {{ACM} Transactions on Quantum Computing},
  title        = {{OpenQASM} 3: A Broader and Deeper Quantum Assembly Language},
  doi          = {10.1145/3505636},
  issn         = {2643-6809, 2643-6817},
  number       = {3},
  pages        = {1--50},
  urldate      = {2022-11-11},
  volume       = {3},
  abstract     = {Quantum assembly languages are machine-independent languages that traditionally describe quantum computation in the circuit model. Open quantum assembly language ({OpenQASM} 2) was proposed as an imperative programming language for quantum circuits based on earlier {QASM} dialects. In principle, any quantum computation could be described using {OpenQASM} 2, but there is a need to describe a broader set of circuits beyond the language of qubits and gates. By examining interactive use cases, we recognize two different timescales of quantum-classical interactions: real-time classical computations that must be performed within the coherence times of the qubits, and near-time computations with less stringent timing. Since the near-time domain is adequately described by existing programming frameworks, we choose in {OpenQASM} 3 to focus on the real-time domain, which must be more tightly coupled to the execution of quantum operations. We add support for arbitrary control flow as well as calling external classical functions. In addition, we recognize the need to describe circuits at multiple levels of specificity, and therefore we extend the language to include timing, pulse control, and gate modifiers. These new language features create a multi-level intermediate representation for circuit development and optimization, as well as control sequence implementation for calibration, characterization, and error mitigation.},
  file         = {Cross et al. - 2022 - OpenQASM 3 A Broader and Deeper Quantum Assembly .pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Cross et al. - 2022 - OpenQASM 3 A Broader and Deeper Quantum Assembly .pdf:application/pdf},
  groups       = {General Compilation},
  keywords     = {general},
  langid       = {english},
  shortjournal = {{ACM} Transactions on Quantum Computing},
  shorttitle   = {{OpenQASM} 3},
}

@Misc{paler2019,
  author     = {Paler, Alexandru},
  date       = {2019-01-30},
  title      = {On the Influence of Initial Qubit Placement During {NISQ} Circuit Compilation},
  eprint     = {1811.08985},
  eprinttype = {arxiv},
  abstract   = {Noisy Intermediate-Scale Quantum ({NISQ}) machines are not fault-tolerant, operate few qubits (currently, less than hundred), but are capable of executing interesting computations. Above the quantum supremacy threshold (approx. 60 qubits), {NISQ} machines are expected to be more powerful than existing classical computers. One of the most stringent problems is that computations (expressed as quantum circuits) have to be adapted (compiled) to the {NISQ} hardware, because the hardware does not support arbitrary interactions between the qubits. This procedure introduces additional gates (e.g. {SWAP} gates) into the circuits while leaving the implemented computations unchanged. Each additional gate increases the failure rate of the adapted (compiled) circuits, because the hardware and the circuits are not fault-tolerant. It is reasonable to expect that the placement inﬂuences the number of additionally introduced gates. Therefore, a combinatorial problem arises: how are circuit qubits allocated (placed) initially to the hardware qubits? The novelty of this work relies on the methodology used to investigate the inﬂuence of the initial placement. To this end, we introduce a novel heuristic and cost model to estimate the number of gates necessary to adapt a circuit to a given {NISQ} architecture. We implement the heuristic (source code available on github) and benchmark it using a standard compiler (e.g. from {IBM} Qiskit) treated as a black box. Preliminary results indicate that cost reductions of up to 10\% can be achieved for practical circuit instances on realistic {NISQ} architectures only by placing qubits diﬀerently than default (trivial placement).},
  annotation = {The authors have some other papers on this subject},
  file       = {Paler - 2019 - On the Influence of Initial Qubit Placement During.pdf:C\:/Users/sskah/OneDrive/Work/QTech/Project/Resources/Paler - 2019 - On the Influence of Initial Qubit Placement During.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
  number     = {{arXiv}:1811.08985},
  publisher  = {{arXiv}},
}

@Article{paler,
  author     = {Paler, Alexandru and Zulehner, Alwin and Wille, Robert},
  title      = {{NISQ} circuit compilers: search space structure and heuristics},
  pages      = {9},
  annotation = {{BULLSHIT}},
  file       = {Paler et al. - NISQ circuit compilers search space structure and.pdf:C\:/Users/sskah/OneDrive/Workspace/QTech/Project/Resources/Paler et al. - NISQ circuit compilers search space structure and.pdf:application/pdf},
  groups     = {General Compilation},
  keywords   = {general},
  langid     = {english},
}

@Article{itoko2019,
  author      = {Itoko, Toshinari and Raymond, Rudy and Imamichi, Takashi and Matsuo, Atsushi},
  date        = {2019-07},
  title       = {Optimization of Quantum Circuit Mapping using Gate Transformation and Commutation},
  doi         = {10.48550/ARXIV.1907.02686},
  eprint      = {1907.02686},
  eprintclass = {quant-ph},
  eprinttype  = {arXiv},
  abstract    = {This paper addresses quantum circuit mapping for Noisy Intermediate-Scale Quantum (NISQ) computers. Since NISQ computers constraint two-qubit operations on limited couplings, an input circuit must be transformed into an equivalent output circuit obeying the constraints. The transformation often requires additional gates that can affect the accuracy of running the circuit. Based upon a previous work of quantum circuit mapping that leverages gate commutation rules, this paper shows algorithms that utilize both transformation and commutation rules. Experiments on a standard benchmark dataset confirm the algorithms with more rules can find even better circuit mappings compared with the previously-known best algorithms.},
  copyright   = {arXiv.org perpetual, non-exclusive license},
  file        = {:http\://arxiv.org/pdf/1907.02686v2:PDF},
  groups      = {Bridge Gate, General Compilation},
  keywords    = {general},
  publisher   = {arXiv},
}

@Article{luks1982,
  author       = {Eugene M. Luks},
  date         = {1982-08},
  journaltitle = {Journal of Computer and System Sciences},
  title        = {Isomorphism of graphs of bounded valence can be tested in polynomial time},
  doi          = {10.1016/0022-0000(82)90009-5},
  number       = {1},
  pages        = {42--65},
  volume       = {25},
  groups       = {Indirect},
  publisher    = {Elsevier {BV}},
}

@InProceedings{alicherry2012,
  author    = {Mansoor Alicherry and T.V. Lakshman},
  booktitle = {2012 Proceedings {IEEE} {INFOCOM}},
  date      = {2012-03},
  title     = {Network aware resource allocation in distributed clouds},
  doi       = {10.1109/infcom.2012.6195847},
  publisher = {{IEEE}},
  groups    = {Indirect, Classical Compilation and Resource Allocation},
  keywords  = {classical},
}

@Article{trotter1959,
  author       = {Trotter, Hale F},
  date         = {1959},
  journaltitle = {Proceedings of the American Mathematical Society},
  title        = {On the product of semi-groups of operators},
  number       = {4},
  pages        = {545--551},
  volume       = {10},
  groups       = {Just for Cite},
  publisher    = {JSTOR},
}

@Article{langione2019,
  author       = {Langione, Matt and Tillemann-Dick, Corban and Kumar, Amit and Taneja, Vikas},
  date         = {2019},
  journaltitle = {Boston Consulting Group},
  title        = {Where will quantum computers create value—and when},
  pages        = {19},
  groups       = {Just for Cite},
}

@Article{preskill2018,
  author       = {Preskill, John},
  date         = {2018},
  journaltitle = {Quantum},
  title        = {Quantum computing in the NISQ era and beyond},
  pages        = {79},
  volume       = {2},
  groups       = {Just for Cite},
  publisher    = {Verein zur F{\"o}rderung des Open Access Publizierens in den Quantenwissenschaften},
}

 
@TechReport{farhi2014,
  author      = {Farhi, Edward and Goldstone, Jeffrey and Gutmann, Sam},
  date        = {2014-11},
  institution = {arXiv},
  title       = {A {Quantum} {Approximate} {Optimization} {Algorithm}},
  doi         = {10.48550/arXiv.1411.4028},
  note        = {arXiv:1411.4028 [quant-ph] type: article},
  url         = {http://arxiv.org/abs/1411.4028},
  urldate     = {2023-01-22},
  abstract    = {We introduce a quantum algorithm that produces approximate solutions for combinatorial optimization problems. The algorithm depends on a positive integer p and the quality of the approximation improves as p is increased. The quantum circuit that implements the algorithm consists of unitary gates whose locality is at most the locality of the objective function whose optimum is sought. The depth of the circuit grows linearly with p times (at worst) the number of constraints. If p is fixed, that is, independent of the input size, the algorithm makes use of efficient classical preprocessing. If p grows with the input size a different strategy is proposed. We study the algorithm as applied to MaxCut on regular graphs and analyze its performance on 2-regular and 3-regular graphs for fixed p. For p = 1, on 3-regular graphs the quantum algorithm always finds a cut that is at least 0.6924 times the size of the optimal cut.},
  file        = {arXiv Fulltext PDF:https\://arxiv.org/pdf/1411.4028.pdf:application/pdf},
  groups      = {Just for Cite},
  keywords    = {Quantum Physics},
}

 
@Article{peruzzo2014,
  author       = {Peruzzo, Alberto and McClean, Jarrod and Shadbolt, Peter and Yung, Man-Hong and Zhou, Xiao-Qi and Love, Peter J. and Aspuru-Guzik, Alán and O’Brien, Jeremy L.},
  date         = {2014-07},
  journaltitle = {Nature Communications},
  title        = {A variational eigenvalue solver on a photonic quantum processor},
  doi          = {10.1038/ncomms5213},
  issn         = {2041-1723},
  language     = {en},
  number       = {1},
  pages        = {4213},
  url          = {https://www.nature.com/articles/ncomms5213},
  urldate      = {2023-01-22},
  volume       = {5},
  abstract     = {Quantum computers promise to efficiently solve important problems that are intractable on a conventional computer. For quantum systems, where the physical dimension grows exponentially, finding the eigenvalues of certain operators is one such intractable problem and remains a fundamental challenge. The quantum phase estimation algorithm efficiently finds the eigenvalue of a given eigenvector but requires fully coherent evolution. Here we present an alternative approach that greatly reduces the requirements for coherent evolution and combine this method with a new approach to state preparation based on ansätze and classical optimization. We implement the algorithm by combining a highly reconfigurable photonic quantum processor with a conventional computer. We experimentally demonstrate the feasibility of this approach with an example from quantum chemistry—calculating the ground-state molecular energy for He–H+. The proposed approach drastically reduces the coherence time requirements, enhancing the potential of quantum resources available today and in the near future.},
  copyright    = {2014 The Author(s)},
  file         = {Full Text PDF:https\://www.nature.com/articles/ncomms5213.pdf:application/pdf},
  groups       = {Just for Cite},
  keywords     = {Applied physics, Quantum chemistry, Quantum optics},
  publisher    = {Nature Publishing Group},
}

 
@Article{campbell2019,
  author       = {Campbell, Earl},
  date         = {2019-08},
  journaltitle = {Physical Review Letters},
  title        = {Random {Compiler} for {Fast} {Hamiltonian} {Simulation}},
  doi          = {10.1103/PhysRevLett.123.070503},
  number       = {7},
  pages        = {070503},
  url          = {https://link.aps.org/doi/10.1103/PhysRevLett.123.070503},
  urldate      = {2023-01-22},
  volume       = {123},
  abstract     = {The dynamics of a quantum system can be simulated using a quantum computer by breaking down the unitary into a quantum circuit of one and two qubit gates. The most established methods are the Trotter-Suzuki decompositions, for which rigorous bounds on the circuit size depend on the number of terms L in the system Hamiltonian and the size of the largest term in the Hamiltonian Λ. Consequently, the Trotter-Suzuki method is only practical for sparse Hamiltonians. Trotter-Suzuki is a deterministic compiler but it was recently shown that randomized compiling offers lower overheads. Here we present and analyze a randomized compiler for Hamiltonian simulation where gate probabilities are proportional to the strength of a corresponding term in the Hamiltonian. This approach requires a circuit size independent of L and Λ, but instead depending on λ the absolute sum of Hamiltonian strengths (the ℓ1 norm). Therefore, it is especially suited to electronic structure Hamiltonians relevant to quantum chemistry. Considering propane, carbon dioxide, and ethane, we observe speed-ups compared to standard Trotter-Suzuki of between 306× and 1591× for physically significant simulation times at precision 10−3. Performing phase estimation at chemical accuracy, we report that the savings are similar.},
  file         = {:campbell2019 - Random Compiler for Fast Hamiltonian Simulation.pdf:PDF},
  groups       = {Hamiltonian Compilation},
  keywords     = {hamiltonian},
  publisher    = {American Physical Society},
}

@Comment{jabref-meta: databaseType:biblatex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Bridge Gate\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:Classical Compilation and Resource Allocation\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:General Compilation\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:Hamiltonian Compilation\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:Indirect\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:Just for Cite\;0\;1\;0x8a8a8aff\;\;\;;
}

@Comment{jabref-meta: saveActions:disabled;
all-text-fields[identity]
date[normalize_date]
month[normalize_month]
pages[normalize_page_numbers]
;}
